#!/bin/sh

######################################################################
#
# SIGAMP - Amplify Input Data Linearly
#
# Usage   : sigamp formula#1 [formula#2 [...] file
#
# Args    : file .... Filepath for data source
#           formula . Amplifying rule for the field #n ($n)
#                     1. "+b" => $n+b
#                        ex. "+2" ...... $n+2
#                            "-10.2" ... $n-10.2
#                            Positive or negative sign is a must.
#                     2. "*a+b" => $n*a+b
#                        ex. "*10" ....... $n*10
#                            "*-2-0.5" ... $n*(-2)-0.5
#                            "x-2-0.5" ... $n*(-2)-0.5
#                            "/2+3.14" ... $n/2+3.14
#                     3. "s,t:u,v" => ($1-s)*(v-u)/(t-s)+u
#                        (This is like "map()" on Arduino)
#                        ex. "4,20:0,5" .. ($n-4)*(5-0)/(20-4)+0
#                            The variable s/u can be omitted respectively
#                            if they have 0. Thus, the above formula
#                            could be rewritten by the following one.
#                            "4,20:5"
#                     a. "rM" / "M" / "fM" / "cM" (M is an integer and >=0)
#                        "rM" and "M" means rounding off the amplified
#                        value at the "M"th decimal place. "fM" means
#                        rounding down (floor), "cM" means rounding up
#                        (ceil).
#                        ex. "r0", "3"
#                        When you want to use these after 1-3 and b
#                        formula, write as follows. (use with "/")
#                        ex. "*0.25/f1",  "*4/0",  "/10/c0"
#                     b. "cA,B" / "rA,B" / "A,B" (Each mean the same)
#                        (This is like "constrain()" on Arduino)
#                        They mean constraining the amplified value to
#                        be within the range from A to B.
#                        ex. "c0,255", "r-5,0", "0,12"
#                            The variable A/B can be omitted respectively
#                            if you want to constrain the value by only
#                            maximum or minimum terminal as follows,
#                            ",255", "0,"
#                        When you want to use these after 1-3 and a
#                        formula, write as follows. (use with "/")
#                        ex. "4,20:0,255/0/0,255"
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2019-04-04
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : sigamp formula#1 [formula#2 [...] file
	Args    : file .... Filepath for data source
	          formula . Amplifying rule for the field #n (\$n)
	                    1. "+b" => \$n+b
	                       ex. "+2" ...... \$n+2
	                           "-10.2" ... \$n-10.2
	                           Positive or negative sign is a must.
	                    2. "*a+b" => \$n*a+b
	                       ex. "*10" ....... \$n*10
	                           "*-2-0.5" ... \$n*(-2)-0.5
	                           "x-2-0.5" ... \$n*(-2)-0.5
	                           "/2+3.14" ... \$n/2+3.14
	                    3. "s,t:u,v" => (\$1-s)*(v-u)/(t-s)+u
	                       (This is like "map()" on Arduino)
	                       ex. "4,20:0,5" .. (\$n-4)*(5-0)/(20-4)+0
	                           The variable s/u can be omitted respectively
	                           if they have 0. Thus, the above formula
	                           could be rewritten by the following one.
	                           "4,20:5"
	                    a. "rM" / "M" / "fM" / "cM" (M is an integer and >=0)
	                       "rM" and "M" means rounding off the amplified
	                       value at the "M"th decimal place. "fM" means
	                       rounding down (floor), "cM" means rounding up
	                       (ceil).
	                       ex. "r0", "3"
	                       When you want to use these after 1-3 and b
	                       formula, write as follows. (use with "/")
	                       ex. "*0.25/f1",  "*4/0",  "/10/c0"
	                    b. "cA,B" / "rA,B" / "A,B" (Each mean the same)
	                       (This is like "constrain()" on Arduino)
	                       They mean constraining the amplified value to
	                       be within the range from A to B.
	                       ex. "c0,255", "r-5,0", "0,12"
	                           The variable A/B can be omitted respectively
	                           if you want to constrain the value by only
	                           maximum or minimum terminal as follows,
	                           ",255", "0,"
	                       When you want to use these after 1-3 and a
	                       formula, write as follows. (use with "/")
	                       ex. "4,20:0,255/0/0,255"
	Version : 2019-04-04 17:48:00 JST
	          (POSIX Bourne Shell/POSIX commands)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}


######################################################################
# Parse Arguments
######################################################################

# === Generate amplifying script =====================================
#
# --- initialize option parameters -----------------------------------
file=''
#
# --- parse and generate ---------------------------------------------
s=$( #--- separate each arguments by line ------------------------------------ #
    for arg in "${@:-}"; do echo "_$arg"; done                                 |
    sed 's/^_//'                                                               |
    # --- insert "+0/" if the arg has only additional operations ------------- #
    sed 's@^[RrFfCc,]@+0/&@'                                                   |
    sed 's@^[0-9]\{1,\}$@+0/&@'                                                |
    sed 's@^[0-9]\{1,\}/@+0/&@'                                                |
    sed 's@^[+-]\{0,1\}[0-9.]\{1,\},\([+-]\{0,1\}[0-9.]\{1,\}\)\{0,1\}$@+0/&@' |
    sed 's@^[+-]\{0,1\}[0-9.]\{1,\},\([+-]\{0,1\}[0-9.]\{1,\}\)\{0,1\}/@+0/&@' |
    # --- remove padded "0"s (the following 2 same sed are both required) ---- #
    sed 's/\([^0-9.]\)0\{1,\}0\([^0-9]\)/\10\2/g'                              |
    sed 's/\([^0-9.]\)0\{1,\}0\([^0-9]\)/\10\2/g'                              |
    sed 's/\([^0-9.]\)0\{1,\}\([1-9]\)/\1\2/g'                                 |
    sed 's/\([^0-9.]\)0\{1,\}$/\10/'                                           |
    # --- separate additional operating signs from the 1st field ------------- #
    sed 's@\(.\)\(/.*\)$@\1 \2@'                                               |
    # --- generate amplifying codes ------------------------------------------ #
    awk '                                                                      #
      BEGIN{                                                                   #
        ORS=",";  an="[0-9]+(\\.[0-9]+)?";  rn="[+-]?" an;                     #
      }                                                                        #
      # --- generate formula for "y=x+b" pattern ---                           #
      $1~"^[+-]" an "$" {                                                      #
        f=($1*1!=0)?sprintf("$%d%s",NR,$1):sprintf("$%d",NR);                  #
        add_func_if_necessary();                                               #
        print f;                                                               #
        next;                                                                  #
      }                                                                        #
      # --- generate formula for "y=ax+b" pattern ---                          #
      $1~"^[x*/]" rn "([+-]" an ")?$" {                                        #
        s=$1;                                                                  #
        sub(/^x/,"*",s);                                                       #
        op1=substr(s,1,1);                                                     #
        match(s,"^." rn);                                                      #
        i=substr(s,2,RLENGTH-1)*1;                                             #
        if (op1=="/" && i==0  ) {eof=-1; exit;                               } #
        if (length(s)==RLENGTH) {                       j=0                 ;} #
        else                    {match(s,"[+-]" rn "$");j=substr(s,RSTART)*1;} #
        if     (i==1 && j==0){f=sprintf("$%d"         ,NR        );}           #
        else if(i==1 && j> 0){f=sprintf("$%d+%s"      ,NR      ,j);}           #
        else if(i==1 && j< 0){f=sprintf("$%d%s"       ,NR      ,j);}           #
        else if(j==0 && i> 0){f=sprintf("$%d%s%s"     ,NR,op1,i  );}           #
        else if(j==0 && i< 0){f=sprintf("$%d%s(%s)"   ,NR,op1,i  );}           #
        else if(i> 0 && j> 0){f=sprintf("$%d%s%s+%s"  ,NR,op1,i,j);}           #
        else if(i> 0 && j< 0){f=sprintf("$%d%s%s%s"   ,NR,op1,i,j);}           #
        else if(i< 0 && j> 0){f=sprintf("$%d%s(%s)+%s",NR,op1,i,j);}           #
        else if(i< 0 && j< 0){f=sprintf("$%d%s(%s)%s" ,NR,op1,i,j);}           #
        add_func_if_necessary();                                               #
        print f;                                                               #
        next;                                                                  #
      }                                                                        #
      # --- generate formula for "y=(yb-ya/xb-xa)*(x-xa)+ya" pattern ---       #
      $1~"^(" rn ",)?" rn ":(" rn ",)?" rn "$" {                               #
        m=index($1,":");                                                       #
        s=substr($1,1,m-1);                                                    #
        n=index(s,",");                                                        #
        xa=(n==0)?0:substr(s,1,n-1)*1; xb=substr(s,n+1)*1;                     #
        s=substr($1,m+1);                                                      #
        n=index(s,",");                                                        #
        ya=(n==0)?0:substr(s,1,n-1)*1; yb=substr(s,n+1)*1;                     #
        xc=xb-xa; yc=yb-ya                                                     #
        if        (xc>0 && yc>0) {                                             #
          f=sprintf("($%d-%s)*%s/%s+%s"  ,NR,xa,yc,xc,ya);                     #
        } else if (xc>0 && yc<0) {                                             #
          f=sprintf("($%d-%s)*(%s)/%s+%s",NR,xa,yc,xc,ya);                     #
        } else if (xc<0 && yc>0) {                                             #
          f=sprintf("($%d-%s)*%s/(%s)+%s",NR,xa,yc,xc,ya);                     #
        } else if (xc<0 && yc<0) {                                             #
          xc=-xc; yc=-yc;                                                      #
          f=sprintf("($%d-%s)*%s/%s+%s"  ,NR,xa,yc,xc,ya);                     #
        } else if (xc==0       ) {                                             #
          eof=-1; exit;                                                        #
        } else if (yc==0       ) {                                             #
          f=sprintf("%s"                             ,ya);                     #
        }                                                                      #
        gsub(/\+\+/,"+",f);                                                    #
        gsub(/\+-/ ,"-",f);                                                    #
        gsub(/-\+/ ,"-",f);                                                    #
        gsub(/--/  ,"+",f);                                                    #
        sub( /\+0$/,"" ,f);                                                    #
        while (match(f,/\([^)-]+-0\)/)) {                                      #
          s=  substr(f,1,RSTART-1)                                             #
          s=s substr(f,RSTART+1,RLENGTH-4)                                     #
          f=s substr(f,RSTART+RLENGTH);                                        #
        }                                                                      #
        while (match(f,/\(-[^)-]+-0\)/)) {                                     #
          s=  substr(f,1,RSTART)                                               #
          s=s substr(f,RSTART+1,RLENGTH-4)                                     #
          f=s substr(f,RSTART+RLENGTH-1);                                      #
        }                                                                      #
        add_func_if_necessary();                                               #
        print f;                                                               #
        next;                                                                  #
      }                                                                        #
      # --- finish generating when unmatched ---                               #
      { eof=1; exit; }                                                         #
      END {print (eof==0)?"@" NR:(eof>0)?"@" NR-1:"@" eof;}                    #
      # --- insert additional functions if required ---                        #
      function add_func_if_necessary( s,t,u,v) {                               #
        s=$2;                                                                  #
        while (match(s,/^\/[^\/]+/)) {                                         #
          t=substr(s,2,RLENGTH-1);                                             #
          s=substr(s,RLENGTH+1);                                               #
          # (a) rounding function                                              #
          if (match(t,/^[RrCcFf]?[0-9]+$/)) {                                  #
            sub(/^[0-9]/,"r&",t);                                              #
            t=tolower(t);                                                      #
            u=substr(t,1,1);                                                   #
            v=10^substr(t,2);                                                  #
            f=(v==1)?sprintf("%s(%s)",u,f):sprintf("%s((%s)*%d)/%d",u,f,v,v);  #
            continue;                                                          #
          }                                                                    #
          # (b) range limiting function                                        #
          if (match(t,"^[CcRr]?(" rn ")?,(" rn ")?$")) {                       #
            sub(/^[CcRr]/,"",t);                                               #
            match(t,/,/);                                                      #
            u=substr(t,1,RSTART-1); if(u!=""){u=u*1;}else{u="\"\"";}           #
            v=substr(t,  RSTART+1); if(v!=""){v=v*1;}else{v="\"\"";}           #
            f=sprintf("m(%s,%s,%s)",f,u,v);                                    #
            continue;                                                          #
          }                                                                    #
          # (z) finish when a invalid pattern                                  #
          eof=1; exit;                                                         #
        }                                                                      #
      }'                                                                       )
#
# --- validate -------------------------------------------------------
numOfFormulas=${s#*@}; numOfFormulas=${numOfFormulas%,}
case "$numOfFormulas" in
   0) print_usage_and_exit          ;;
  -1) error_exit 1 'Invalid formula';;
esac
shift $numOfFormulas
#
# --- get the generated formulas -------------------------------------
formulas=${s%,@*}

# === Parse the source file path =====================================
case $# in
  0) :                   ;;
  1) file=$1             ;;
  *) print_usage_and_exit;;
esac

# === Validate the arguments =========================================
if   [ "_$file" = '_'                ] ||
     [ "_$file" = '_-'               ] ||
     [ "_$file" = '_/dev/stdin'      ] ||
     [ "_$file" = '_/dev/fd/0'       ] ||
     [ "_$file" = '_/proc/self/fd/0' ]  ; then
  file=''
elif [ -f "$file"                    ] ||
     [ -c "$file"                    ] ||
     [ -p "$file"                    ]  ; then
  [ -r "$file" ] || error_exit 1 'Cannot open the file: '"$file"
else
  print_usage_and_exit
fi
case "$file" in ''|-|/*|./*|../*) :;; *) file="./$file";; esac


######################################################################
# Amplify
######################################################################

exec awk '
  {print '"$formulas"'}
  function r(n){return (n>=0)?int(n+0.5):(n-int(n)>=-0.5)?int(n):int(n)-1;}
  function f(n){return (int(n)==n)?n*1:(n>=0)?int(n)  :int(n)-1;}
  function c(n){return (int(n)==n)?n*1:(n>=0)?int(n)+1:int(n)  ;}
  function m(n,min,max) {
    if (min=="" ) {return (max=="")?n:(n>max)?max:n;}
    if (max=="" ) {return (min=="")?n:(n<min)?min:n;}
    if (min<=max) {return (n<min)?min:(n>max)?max:n;}
    else          {return (n<max)?max:(n>min)?min:n;}
  }
  ' "$file"
