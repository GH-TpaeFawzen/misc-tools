#!/bin/sh

######################################################################
#
# GREO - "Global Regular Expression and Overwrite"
#
# USAGE: greo [options] regexp(BRE) replacement file#1 [file#2...]
#
#        -F, --fixed-strings
#            fixed-strings
#        -R, -r, --recursive
#            recursively
#        -p, --perform, --start
#            do GRER actually, if you run this command without the
#            options, it will be work as rehearsal mode
#        --quick-update
#            replace the file(s) without tempfile (only for professional)
#            * quickly replacing but permission, owner/group, link, ACL
#              informations will be reset
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2017-02-23
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, I am fed up the side effects which are broght about by
# the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH)${PATH:+:}${PATH:-}"

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [options] regexp(BRE) replacement file#1 [file#2...]
	Options : -F, --fixed-strings
                  fixed-strings
	          -R, -r, --recursive
	              recursively
	          -p, --perform, --start
	              do GRER actually, if you run this command without the
	              options, it will be work as rehearsal mode
	          --quick-update
	              replace the file(s) without tempfile (only for professional)
	              * quickly replacing but permission, owner/group, link, ACL
	                informations will be reset
	Version : 2017-02-23 17:24:54 JST
	          (POSIX Bourne Shell/POSIX commands)
	USAGE
  exit 1
}
error_exit() {
  [ -n "$2"       ] && echo "${0##*/}: $2" 1>&2
  exit $1
}
exit_trap() {
  trap '-' EXIT HUP INT QUIT PIPE ALRM TERM
  rm -f "${Tempfile:-}"
  exit ${1:-0}
}

# === Define some chrs. to escape some special chrs. temporarily =====
LFs=$(printf '\\\n_');LFs=${LFs%_} # Use as a "\n" in s-command of sed

# === FUNC : the alternative of the "mktemp -t" ======================
mktempf0() {
  # --- parameters, etc. ---------------------------------------------
  num_of_digits=16  # Length of Random String
  n=10              # Max Times of Retrying
  chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
                    # Available letters
  # --- call built-in mktemp if exists -------------------------------
  type mktemp >/dev/null 2>&1 && {
    mktemp -t tmp.${0##*/}.$$.XXXXXXXXXXXXXXXX
    return $?
  }
  # --- set the temporary directory ----------------------------------
  Dir_tmp=$(set | grep -q ^TMPDIR= | sed 's/^[^=]\{1,\}=//');
  case "$Dir_tmp" in
    '') Dir_tmp='/tmp'      ;;
    /)  Dir_tmp=''          ;;
    *)  Dir_tmp=${Dir_tmp%/};;
  esac
  # --- mktemp loop --------------------------------------------------
  while [ $n -ge 0 ]; do
    # --- Generate Ramdom string -------------------------------------
    # calculate the number of words which required
    nw=$(echo "${num_of_digits}*l(${#chrs})/11.09+1" | # 11.09=ln(65536)
         bc -l                                       |
         sed 's/\..*$//'                             )
    # make a random hexadecimal digit
    if [ -c /dev/urandom ]; then
      hstr=$(dd if=/dev/urandom bs=2 count=$nw 2>/dev/null |
             od -A n -t x2 -v                              |
             tr 'abcdef ' 'ABCDEF\n'                       |
             tr -Cd 0123456789ABCDEF                       )
    else
      hstr=$( (ps -Ao pid,etime,pcpu,vsz; date)         |
             od -t d4 -A n -v                           |
             sed 's/[^0-9]\{1,\}/'"$LFs"'/g'            |
             grep '[0-9]'                               |
             tail -n 42                                 |
             sed 's/.*\(.\{8\}\)$/\1/g'                 |
             awk 'BEGIN{a=-2147483648;}                 #
                       {a+=$1;        }                 #
                  END  {                                #
                    srand(a);                           #
                    for(i=0;i<'$nw';i++){               #
                      printf("%02X",int(rand()*65536)); #
                    }                                   #
                  }'                                    )
    fi
    # make a random string from the hexadecimal digit
    s=$(echo "obase=${#chrs};ibase=16;$hstr"                     |
        bc                                                       |
        tr -d '\\\n'                                             |
        tr ' ' '\n'                                              |
        awk 'BEGIN  {for(i=1;i<'$num_of_digits';i++){print 0;}}  #
             /[0-9]/{print;                                   }' |
        awk 'BEGIN  {ORS="";                                     #
                     s="'"$chrs"'";                              #
                     for(i=0;i<length(s);i++){                   #
                       c[i]=substr(s,i+1,1);                     #
                     }                        }                  #
             /[0-9]/{print c[$0*1];           }'                 |
        tail -c $num_of_digits                                   )
    # --- Making the file path ---------------------------------------
    Path_target="${Dir_tmp}/tmp.${0##*/}.$$.$s"
    # --- Making the file --------------------------------------------
    (set -C; umask 177; : > "$Path_target") 2>/dev/null || {
      [ -f "$Path_target" ] && { n=$((n-1)); continue; }
      n=-1; break;
    }
    break
  done
  # --- print error message when failed to make a file ---------------
  case "$n" in -1) return 1;; esac
  # --- print the path of the file -----------------------------------
  printf '%s\n' "$Path_target"
  # --- return successfully ------------------------------------------
  return 0
}


######################################################################
# Argument Parsing
######################################################################

# === Set default values =============================================
optF=0
optR=0
optp=0
optt=0

# === Parse arguments (except files) =================================
optmode=''
while :; do
  case $# in 0) break;; esac
  case "$optmode" in
    '') case "$1" in
          -)       case $# in 1) break;; esac
                   ;;
          -[prRF]*) s=$(printf '%s\n' "${1#-}"                           |
                        awk '{opt = "_"; err="";                         #
                              l = length($0);                            #
                              for (n=1;n<=l;n++) {                       #
                                c = substr($0, n, 1);                    #
                                if      (c=="p") { opt = opt "p";      } #
                                else if (c=="r") { opt = opt "R";      } #
                                else if (c=="R") { opt = opt "R";      } #
                                else if (c=="F") { opt = opt "F";      } #
                               #else if (c=="X") { opt = opt "X";break;} #
                                else             { err = "!";          } #
                              }                                          #
                              arg = (n<l) ? substr($0,n+1) : "";         #
                              printf("%s%s %s",err,opt,arg);           }')
                     arg=${s#* }
                     s=${s%% *}
                     case "$s" in '!'*) print_usage_and_exit;; esac
                     case "$s" in  *p*) optp=1              ;; esac
                     case "$s" in  *R*) optR=1              ;; esac
                     case "$s" in  *F*) optF=1              ;; esac
                    #case "$s" in  *X*) optmode='X'         ;; esac
                     shift;
                     case "$arg" in '') continue;; esac
                     ;;
          --perform|--start)
                     optp=1
                     shift
                     continue
                     ;;
          --recursive)
                     optR=1
                     shift
                     continue
                     ;;
          --fixed-strings)
                     optF=1
                     shift
                     continue
                     ;;
          --quick-update)
                     optt=1
                     shift
                     continue
                     ;;
         #--dummy=*)
         #           optx=${s#--dummy=}
         #           shift
         #           continue
         #           ;;
          -*)        print_usage_and_exit
                     ;;
          *)         break
                     ;;
        esac
        ;;
    *)  arg=$1
        shift
        ;;
  esac
  case "$optmode" in
   #X) optX=$arg                                     ;;
    *) error_exit 'There is a BUG is in this program';;
  esac
  optmode=''
done
case "$#" in
  [012]) print_usage_and_exit   ;;
      *) pat=$1; sub=$2; shift 2;;
  *) 
esac


######################################################################
# Prepare for the Main Routine
######################################################################

# === Decide the option string for grep ==============================
opt4grep=''
case $optF       in  0) :;; *) opt4grep="${opt4grep}F";; esac
case $optR       in  0) :;; *) opt4grep="${opt4grep}R";; esac
case "$opt4grep" in '') :;; *) opt4grep="-${opt4grep}";; esac
case "$optR$#" in
  '01') devnull='/dev/null';; # Dummy file to make grep print the filename
     *) devnull=''         ;;
esac

# === Decide the strings for grep and sed ============================
case $optF in
  0) pat4grep=$pat
     pat4sed=$(printf '%s\n' "$pat"                                          |
               # --- escape all of "/" ------------------------------------- #
               awk '                                                         #
                 BEGIN{                                                      #
                   # --- 0) initialize                                       #
                   OFS="";                                                   #
                   ORS="";                                                   #
                   iBra=0; # ==0 : out of a bracket                          #
                           # ==1 : on entering a bracket                     #
                           # >=1 : during in a bracket                       #
                   fEsc=0; # >0  : to have to escape the next character      #
                   fPcc=0; # >0  : possibility of the top of POSIX charclass #
                   # --- 1) start of line loop                               #
                   while (getline line) {                                    #
                   #                                                         #
                   # --- 2) start of character-loop                          #
                   l=length(line);                                           #
                   for (i=1; i<=l; i++) {                                    #
                   #                                                         #
                   # --- 3) get a character (or POSIX charclass)             #
                   if (fPcc==0)                    {                         #
                     s=substr(line,i,1);                                     #
                   } else                          {                         #
                     s1=substr(line,i);                                      #
                     if (match(s1,/^:[a-z]+:\]/)) {                          #
                       s=substr(s1,1,RLENGTH);                               #
                       i=i+RLENGTH-1;                                        #
                     }  else                      {                          #
                       s=substr(s1,1,      1);                               #
                     }                                                       #
                     fPcc=0;                                                 #
                   }                                                         #
                   #                                                         #
                   # --- 4) Escape "/" if required                           #
                   if (       iBra==0) {                                     #
                     if      (fEsc >0) {print s    ; fEsc=0; continue;}      #
                     if      (s=="\\") {print "\\" ; fEsc=1;          }      #
                     else if (s=="[" ) {print "["  ; iBra=1;          }      #
                     else if (s=="/" ) {print "\\/";                  }      #
                     else              {print s    ;                  }      #
                   } else if (iBra==1) {                                     #
                     if      (s=="^" ) {print "^"  ;                  }      #
                     else if (s=="[" ) {print "["  ; iBra=2; fPcc=1;  }      #
                     else              {print s    ; iBra=2;          }      #
                   } else              {                                     #
                     if      (s=="[" ) {print "["  ;         fPcc=1;  }      #
                     else if (s=="]" ) {print "]"  ; iBra=0;          }      #
                     else              {print s    ;                  }      #
                   }                                                         #
                   #                                                         #
                   # --- 5) end of character-loop                            #
                   }                                                         #
                   #                                                         #
                   # --- 6) end of line-loop                                 #
                   print "\n";                                               #
                   }                                                         #
                 }'                                                          )
     sub4sed=$(printf '%s\n' "$sub"   |
               # --- escape all of "/"#
               sed 's/\//\\\//g'      )
     ;;
  *) pat4grep=$pat
     pat4sed=$(printf '%s\n' "$1"                |
               # --- escape all of BRE meta chrs.#
               sed 's/\([].\*/[]\)/\\\1/g'       |
               sed '1s/^^/\\^/'                  |
               sed '$s/$$/\\$/'                  )
     sub4sed=$(printf '%s\n' "$sub"              |
               # --- escape all of BRE meta chrs.#
               sed 's/\([\&/]\)/\\\1/g'          |
               sed 's/$/\\/'                     |
               sed '$s/\\$//'                    )
     ;;
esac


######################################################################
# Main Routine (reharsal mode)
######################################################################

case $optp in 0)
  echo '*** Now working as rehearsal mode. (option "-p" lets me be a take)' 1>&2
  if find "$@" 2>/dev/null | grep -q ':' 2>/dev/null; then
    printf '%s: %s' "${0##*/}" 'WARNING!! Some filepathed contain ":".' 1>&2
    printf '%s\n'              ' These cause destroying other files.'   1>&2
  fi
  if grep $opt4grep "$pat4grep" $devnull "$@" 2>/dev/null; then
    exit 0
  else
    error_exit $? 'No file matched'
  fi
;; esac


######################################################################
# Main Routine
######################################################################

# === Make a temporary file if necessary =============================
case "$optt" in 0)
  trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
  Tempfile=$(mktempf0)
  if [ $? -ne 0 ] || [ -z "$Tempfile" ]; then
    error_exit 'Cannot create a temporary file'
  fi
;; esac

# === List target files ============================================= #
grep $opt4grep "$pat4grep" $devnull "$@"                              |
sed 's/:.*$//'                                                        |
uniq                                                                  |
                                                                      #
# === GRERing ======================================================= #
while IFS= read -r file0; do                                          #
  file=$file0                                                         #
  # 1) --- validate file                                              #
  if   [ -f "$file"      ]; then                                      #
    :                                                                 #
  elif [ -e "$file"      ]; then                                      #
    echo "Failure: not a regular file: $file0"                        #
    continue                                                          #
  else                                                                #
    echo "Failure: file not found: $file0"                            #
    continue                                                          #
  fi                                                                  #
  case "$file" in /*|./*|../*) :;; *) file="./$file";; esac           #
                                                                      #
  # 2) --- "greo" a file                                              #
  case $optt in                                                       #
    0) sed "s/$pat4sed/$sub4sed/g" "$file" > "$Tempfile" &&           #
       cat "$Tempfile"                     > "$file"                  #
       ;;                                                             #
    *) (rm "$file" && sed "s/$pat4sed/$sub4sed/g" > "$file") <"$file" #
       ;;                                                             #
  esac                                                                #
  if [ $? -eq 0 ]; then                                               #
    echo "Success: GREOed: $file0"                                    #
  else                                                                #
    echo "Failure: failed to greo halfway: $file0"                    #
  fi                                                                  #
done


######################################################################
# Finish
######################################################################

exit_trap 0
