#! /bin/sh -u

######################################################################
#
# FSED : flexible sed (looks like the fgrep)
#
# Usage  : fsed <pattern_str> <substitute_str> <file>
#
# * fsed is more flexible substituter than the sed command. This
#   ignores all of the functions which every meta-character of regular
#   expression has, so that you can very easily substitute strings
#   include various meta-characters, e.g. ^, $, \, /, &, and so on.
#
# Written by Rich Mikan (richmikan[at]richlab.org) at 2015/02/07
#
# This is a public-domain software. It measns that all of the people
# can use this with no restrictions at all. By the way, I am fed up
# the side effects which are broght about by the major licenses.
#
######################################################################

# print the usage and exit
print_usage_and_exit () {
  cat <<__USAGE 1>&2
Usage   : ${0##*/} <pattern_str> <substitute_str>
Version : Sat Feb  7 00:53:24 JST 2015
__USAGE
  exit 1
}

# parse the arguments
case $# in
  3) if [ \( -f "$3"      \) -o \
          \( -c "$3"      \) -o \
          \( -p "$3"      \) -o \
          \( "_$3" = '_-' \)     ]; then
       file=$3
       case "$file" in -) :;; -*) file="./$file";; esac
     else
       echo '*** No such file found' 1>&2
       print_usage_and_exit
     fi                                  ;;
  2) file='-'                            ;;
  *) print_usage_and_exit                ;;
esac
pat=$(printf '%s' "$1"            |
      sed 's/\([].\*/[]\)/\\\1/g' |
      sed 's/^\^/\\^/'            |
      sed 's/\$$/\\$/'            )
sub=$(printf '%s' "$2"         |
      sed 's/\([\&/]\)/\\\1/g' )

# transformation
case "$file" in
  -) sed "s/$pat/$sub/g"        ;;
  *) sed "s/$pat/$sub/g" "$file";;
esac
