#! /bin/sh

######################################################################
#
# PUNLOCK : A Unlock Command for "pexlock" and "pshlock"
#
# Usage   : ${0##*/} [options] <lockname> [lockname ...]
#           -d <lockdir> ...... the directory for lockfiles.
#                               The lockfile directory will be decided
#                               as the following rule.
#                               1) this option "-d" if specified
#                               2) the environment varriable "PLOCKDIR"
#                                  if specified
#                               3) if the environment varriable "TMPDIR"
#                                  specified, "$TMPDIR/plock.<username>"
#                               4) "/tmp/plock.<username>" (default)
#           -w <maxwaiting> ... <<for only lockfiles by "pshlock">>
#                               maximum waiting seconds to succeed locking
#                               (-1 means waiting infinitely)
#                               The default value is 10.
#           -l <lifetime> ..... <<for only lockfiles by "pshlock">>
#                               the maximum lifetime of the lockfile (sec)
#                               The default value is 600.
#                               Older lockfiles than that will be ignored
#                               and removed.
#                               (-1 means infinitely)
# Return  : ==0 ... one or more unlocking were success
#           !=0 ... all failure
#
# Example : See the header comments of "pexlock" and "pshlock"
#
# Written by Rich Mikan (richmikan[at]richlab.org) at 2015/05/21
#
# This is a public-domain software. It measns that all of the people
# can use this with no restrictions at all. By the way, I am fed up
# the side effects which are broght about by the major licenses.
#
######################################################################


# ===== FUNCTIONS ====================================================

# --- FUNC: print the usage and exit ---------------------------------
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} [options] <lockname> [lockname ...]
	          -d <lockdir> ...... the directory for lockfiles.
	                              The lockfile directory will be decided
	                              as the following rule.
	                              1) this option "-d" if specified
	                              2) the environment varriable "PLOCKDIR"
	                                 if specified
	                              3) if the environment varriable "TMPDIR"
	                                 specified, "\$TMPDIR/plock.<username>"
	                              4) "/tmp/plock.<username>" (default)
	          -w <maxwaiting> ... <<for only lockfiles by "pshlock">>
	                              maximum waiting seconds to succeed locking
	                              (-1 means waiting infinitely)
	                              The default value is 10.
	          -l <lifetime> ..... <<for only lockfiles by "pshlock">>
	                              the maximum lifetime of the lockfile (sec)
	                              The default value is 600.
	                              Older lockfiles than that will be ignored
	                              and removed.
	                              (-1 means infinitely)
	Version : Thu May 21 13:13:32 JST 2015
__USAGE
  exit 1
}

# --- FUNC: exit-trap ------------------------------------------------
# arg   : [return code]
# ret   : (not return)
exit_trap () {
  trap EXIT HUP INT QUIT PIPE ALRM TERM
  rm -rf "${File_modlk:-}" >/dev/null 2>&1
  case $# in 0) exit $?;; *) exit ${1:-0};; esac
}

# --- FUNC: Remove the too old directories in the specified directory 
# arg #1: directory path which it be removed the old files
#         if the end of the string is "/", the directory itself will not
#         be removed
# arg #2: lifetime in seconds
# ret   : 0 when succeeded
rmdir_if_too_old() {
  [ -d "$1"    ] || return 1
  [ "$2" -lt 0 ] && return 0

  # --- Calculate the date and time of the border --------------------
  borderdatetime=$(awk '
    BEGIN {
      now_gm="'$(TZ=UTC+0 date '+%Y%m%d%H%M%S')'";
      now_lo="'$(         date '+%Y%m%d%H%M%S')'";
      unixtime2YYYYMMDDhhmmss_init("LOCALTIME");
      now_ut = YYYYMMDDhhmmss2unixtime(now_lo);
      bor_rt = unixtime2YYYYMMDDhhmmss(now_ut-'"$2"'-1);
      print substr(bor_rt,1,12) "." substr(bor_rt,13);
    }
    function YYYYMMDDhhmmss2unixtime(YYYYMMDDhhmmss, Y,M,D,h,m,s,l) {
      # 1) seperate the units
      l = length(YYYYMMDDhhmmss);
      if        (l <  5) { # invalid
        return -1;
      } else if (l <  8) { # YYMMMDD only
        Y = substr(YYYYMMDDhhmmss,  1,l-4)*1+substr(now_lo,1,2)*100;
        M = substr(YYYYMMDDhhmmss,l-3,  2)*1;
        D = substr(YYYYMMDDhhmmss,l-1,  2)*1;
        h = 0; m = 0; s = 0;
      } else if (l < 12) { # YYYYMMDD only
        Y = substr(YYYYMMDDhhmmss,  1,l-4)*1;
        M = substr(YYYYMMDDhhmmss,l-3,  2)*1;
        D = substr(YYYYMMDDhhmmss,l-1    )*1;
        h = 0; m = 0; s = 0;
      } else {             # YYYYMMDDhhmmss
        Y = substr(YYYYMMDDhhmmss,  1,l-10)*1;
        M = substr(YYYYMMDDhhmmss,l-9,   2)*1;
        D = substr(YYYYMMDDhhmmss,l-7,   2)*1;
        h = substr(YYYYMMDDhhmmss,l-5,   2)*1;
        m = substr(YYYYMMDDhhmmss,l-3,   2)*1;
        s = substr(YYYYMMDDhhmmss,l-1     )*1;
      }
      # 2) validate
      if ((s>60) || (m>59) || (h>23) || (M>12)) {return -1;}
      days_of_month[2] = (Y%4!=0)?28:(Y%100!=0)?29:(Y%400!=0)?28:29;
      if (D > days_of_month[M]                ) {return -1;}
      # 3) adjust the value of year and month
      if (M<3) {M+=12; Y--;}
      # 4) calculate unixtime
      return (365*Y+int(Y/4)-int(Y/100)+int(Y/400)+int(306*(M+1)/10)-428+D-719163)*86400+(h*3600)+(m*60)+s-offset;
    }
    function unixtime2YYYYMMDDhhmmss_init(localtime_flag, gm,lo) {
      max_calced_year = 1970;              # To remember everydays on Jan.1 from
      days_on_Jan1st_from_epoch[1970] = 0; # the Epoch which was calculated once
      split("31 0 31 30 31 30 31 31 30 31 30 31", days_of_month);
      if (localtime_flag == "LOCALTIME") {
        gm      = YYYYMMDDhhmmss2unixtime(now_gm);
        lo      = YYYYMMDDhhmmss2unixtime(now_lo);
        offset  = lo - gm;
        offset -= (offset%2); # cancel the timelag of the two date starting time
      } else {
        offset  = 0;
      }
    }
    function unixtime2YYYYMMDDhhmmss(ut, Y,M,D,h,m,s,t,i,j) {
      # 0) timezone adjustment
      ut += offset;
      if (ut < 0) {return -1;}
      # 1) calculate hour,minute,second and number of days from the Epoch
      s = ut % 60;  t = int(ut/60);
      m =  t % 60;  t = int( t/60);
      h =  t % 24;
      days_from_epoch = int( t/24);
      # 2) calculate year
      Y = int(days_from_epoch/365.2425)+1970+1;
      if (Y > max_calced_year) {
         i = days_on_Jan1st_from_epoch[max_calced_year];
         for (j=max_calced_year; j<Y; j++) {
           i += (j%4!=0)?365:(j%100!=0)?366:(j%400!=0)?365:366;
           days_on_Jan1st_from_epoch[j+1] = i;
         }
         max_calced_year = Y;
      }
      for (;;Y--) {
        if (days_from_epoch >= days_on_Jan1st_from_epoch[Y]) {
          break;
        }
      }
      # 3) calculate month,day
      days_of_month[2] = (Y%4!=0)?28:(Y%100!=0)?29:(Y%400!=0)?28:29;
      D = days_from_epoch - days_on_Jan1st_from_epoch[Y] + 1;
      for (M=1; ; M++) {
        if (D > days_of_month[M]) {
          D -= days_of_month[M];
        } else {
          break;
        }
      }
      return sprintf("%04d%02d%02d%02d%02d%02d",Y,M,D,h,m,s);
    }
  ')
  # --- Make a file for comparing timestamps -------------------------
  touch -t $borderdatetime "${1%/}/.border_date_and_time.tmp"
  # --- Find and rmdir the too old files -----------------------------
  s=$(printf '%s' "${1%/}"'/'    | # to avoid removing the directory $1
      sed 's/\([].\*[]\)/\\\1/g' |
      sed 's/^\^/^\\^/'          |
      sed 's/^/^/'               |
      sed 's/$/\\{0,1\\}$/'      )
  find "$1" -type d \( \! -newer "${1%/}/.border_date_and_time.tmp" \) |
  if [ "_$1" == "_${1%/}" ]; then                                      #
    grep -v "$s"                                                       #
  else                                                                 #
    cat                                                                #
  fi                                                                   |
  xargs rm -rf
  rm -f "${1%/}/.border_date_and_time.tmp"
}



# ===== PREPARATION ==================================================

# --- initialize -----------------------------------------------------
set -u
PATH='/usr/bin:/bin'
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
export IFS LC_ALL=C LANG=C PATH
umask 0022

# --- parse the arguments --------------------------------------------
dopt=''
max_waiting_secs=10
max_lifetime_secs=600
optmode=''
while [ $# -gt 0 ]; do
  case "$optmode" in
    '') case "$1" in
          --)      shift
                   break
                   ;;
          -[hv]|--help|--version)
                   print_usage_and_exit
                   ;;
          -[dwl]*) ret=$(printf '%s\n' "${1#-}"                              |
                         awk '{opt     = substr($0,1,1);                     #
                               opt_str = (length($0)>1) ? substr($0,2) : ""; #
                               printf("%s %s", opt, opt_str);              }')
                   ret1=${ret%% *}
                   ret2=${ret#* }
                   case "$ret1$ret2" in
                     d)  optmode='d'             ;;
                     d*) dopt=$ret2              ;;
                     w)  optmode='w'             ;;
                     w*) max_waiting_secs=$ret2  ;;
                     l)  optmode='l'             ;;
                     l*) max_lifetime_secs=$ret2 ;;
                   esac
                   ;;
          -*)      print_usage_and_exit
                   ;;
          *)       break
                   ;;
        esac
        ;;
    d)  dopt=$1
        optmode=''
        ;;
    w)  max_waiting_secs=$1
        optmode=''
        ;;
    l)  max_lifetime_secs=$1
        optmode=''
        ;;
  esac
  shift
done
case $# in 0) print_usage_and_exit;; esac
echo "_$max_waiting_secs"   | grep -Eq '^_-?[0-9]+$' || {
  echo "${0##*/}: Maximum waiting seconds parameter is invalid" 1>&2
  exit 1
}
echo "_$max_lifetime_secs"  | grep -Eq '^_[0-9]+$'   || {
  echo "${0##*/}: Maximum lifetime parameter is invalid" 1>&2
  exit 1
}
Dir_lock=''
while :; do
  case "$dopt"         in '') :;; *) Dir_lock="${dopt%/}/"
                                     break                             ;; esac
  case "${PLOCKDIR:-}" in '') :;; *) Dir_lock="${PLOCKDIR%/}/"
                                     break                             ;; esac
  case "${TMPDIR:-}"   in '') :;; *) Dir_lock="${TMPDIR%/}/plock.$(id -un)/"
                                     mkdir -p "$Dir_lock" 2>/dev/null
                                     break                             ;; esac
  case 'default'       in         *) Dir_lock="/tmp/plock.$(id -un)/"
                                     mkdir -p "$Dir_lock" 2>/dev/null
                                     break                             ;; esac
done
case $? in
  [^0]*) echo "${0##*/}: Failed to make the lockfile directory" 1>&2;exit 1;;
esac
[ \( -z "$dopt" \) -o \( -d "$dopt" \) ] || {
  echo "${0##*/}: \"$Dir_lock\": No such directory or permission denied" 1>&2
  exit 1
}
case "$Dir_lock" in [^/]*) s=$(pwd);Dir_lock="${s%/}/$Dir_lock";; esac



# ===== MAIN =========================================================

Dir_home=$(pwd);Dir_home=${Dir_home%/}
trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
count_all=0
count_success=0
for lockname in "$@"; do
  count_all=$((count_all+1))

  # --- Validate the lockname  ---------------------------------------
  # 1) if the argument is as a sh-lock, separate lock-id from the argument
  locksubid=''
  echo "_$lockname" | grep -Eq '^_.+/[0-9]{14}\.[0-9]+\.[0-9]+$' && {
    sublockname=${lockname##*/}
    lockname=${lockname%/*}
  }
  # 2) make the argument an absolute filepath and separate it into the
  #    directory path and the lockname
  case "$lockname" in
      '/'*) :                                        ;;    # as a path
     './'*) lockname="${Dir_home%}/${lockname#./}"   ;;    # as a path
    '../'*) lockname="${Dir_home%/*}/${lockname#../}";;    # as a path
       */*) lockname="${Dir_home%}/$lockname"        ;;    # as a path
         *) case "$lockid" in
              '') lockname="$Dir_lock$lockname"         ;; # just a lockname(ex)
               *) lockname="$Dir_lock$lockname$lockname";; # just a lockname(sh)
            esac
            ;;
  esac
  Dir_path="${lockname%/*}/"
  lockname="${lockname##*/}"
  # 3) skip if the argument is one of some reserve names
  case "$lockname" in
    '.border_date_and_time.tmp')
      echo "${0##*/}: \".border_date_and_time.tmp\" is reserved, skip" 1>&2
      continue
      ;;
  esac
  echo "_$lockname" | grep -Eq '^_\.preshlock\.[0-9]{14}\.[0-9]+\.[0-9]+$' && {
    echo "${0##*/}: \"$lockname\": '/' is reserved, skip" 1>&2
    continue
  }

  # --- Try to unlock as a exclusive-lock ----------------------------
  rm "$Dir_path$lockname" 2>/dev/null && {
    count_success=$((count_success+1))
    continue
  }

  # --- If failed, then try to unlock as a shared-lock ---------------
  # 0) already unlocked?
  [ -d "$Dir_path$lockname" ] || {
    count_success=$((count_success+1))
    continue
  }
  # 1) trying loop
  if [ $max_waiting_secs -ge 0 ]; then
    try=$((max_waiting_secs+1))
  else
    try=1
  fi
  while [ $try -gt 0 ]; do
    # 1-1) remove the wreckage "modifying" if exist
    rmdir_if_too_old "${Dir_path}modifying" \
                     "$max_lifetime_secs"
    # 1-2) try to create the accesing right token file "modifying"
    File_modlk="${Dir_path}modifying"
    mkdir "${Dir_path}modifying" || {
      File_modlk=''                                   # retry  if already exists
      sleep 1
      [ $max_waiting_secs -ge 0 ] && try=$((try-1))
      continue
    }
    # 1-3) remove the lock process-id directory
    [ -d "${Dir_path}$lockname/$sublockname" ] && {
      rmdir "${Dir_path}$lockname/$sublockname" || {
        try=-1                                        # exit loop abnormally
        rmdir "${Dir_path}modifying"
        File_modlk=''
        break
      }
    }
    # 1-4) remove the wreckage directories if exist
    rmdir_if_too_old "${Dir_path}" "$max_lifetime_secs"
    # 1-5) if the current number of the locking processes is 0,
    #      remove the sh-lock directory
    n=$(ls -ld "${Dir_path}" 2>/dev/null | awk '{n=$2-3;print (n>=0)?n:0;}')
    case $n in
      0) rm -rf "${Dir_path}"
         File_modlk=''
         break
         ;;
    esac
    # 1-6) finish the loop successfully
    rmdir "${Dir_path}modifying"
    File_modlk=''
    break
  done
  # 2) $try > 0 : success and print the path of the generated lockfile
  #         ==0 : now fully locked
  #         < 0 : abnormally exit
  #    otherwise, it means some error happened
  case $try in
    [1-9]*) :                                                                 ;;
         0) echo "${0##*/}: \"$lockname\": timeout, try again later"      1>&2;;
        -1) echo "${0##*/}: \"$lockname\": failed to remove lock proc-id" 1>&2;;
        -*) echo "${0##*/}: \"$lockname\": unexpedter error!"             1>&2;;
  esac

  count_success=$((count_success+1))
done



# ===== FINISH =======================================================

# --- Return 1 if all locking failed ---------------------------------
case "$count_success:$count_all" in
  0:[^0]*) exit 1;;
        *) exit 0;;
esac