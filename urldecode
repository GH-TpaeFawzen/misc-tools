#!/bin/sh

######################################################################
#
# URLENCODE - URL decoder on the basis of RFC 3986
#
# USAGE: urldecode <file> ...
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2017-02-07
#
# This is a public-domain software (CC0). It measns that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, I am fed up the side effects which are broght about by
# the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -eu
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH)${PATH:+:}${PATH:-}"

# === Define the functions for printing usage ========================
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} <file> ...
	Version : 2017-02-07 02:01:03 JST
	          (POSIX Bourne Shell/POSIX commands)
	USAGE
  exit 1
}


######################################################################
# Parse Options
######################################################################

# === Print help message if required =================================
case "${1:-}" in
  --help|--version|-h) print_usage_and_exit;;
esac


######################################################################
# Main
######################################################################

case $# in
  0) cat -                    ;;
  *) for file in "$@"; do      #
       case "$file" in      #  #
         -)  :             ;;  #
         /*) :             ;;  #
         *)  file="./$file";;  #
       esac                 #  #
       cat "$file"             #
     done                     ;;
esac |
(cat -; printf '\n') |
awk '
BEGIN {
  # --- prepare
  OFS = "";
  ORS = "";
  # --- prepare decoding
  for (i=0; i<256; i++) {
    l  = sprintf("%c",i);
    k1 = sprintf("%02x",i);
    k2 = substr(k1,1,1) toupper(substr(k1,2,1));
    k3 = toupper(substr(k1,1,1)) substr(k1,2,1);
    k4 = toupper(k1);
    p2c[k1]=l;p2c[k2]=l;p2c[k3]=l;p2c[k4]=l;
  }
  # --- decode
  while (getline line) {
    gsub(/\+/, " ", line);
    while (length(line)) {
      if (match(line,/%[0-9A-Fa-f][0-9A-Fa-f]/)) {
        print substr(line,1,RSTART-1), p2c[substr(line,RSTART+1,2)];
        line = substr(line,RSTART+RLENGTH);
      } else {
        print line;
        break;
      }
    }
    print "\n";
  }
}' |
awk '
BEGIN{
  ORS="";
  OFS="";
  getline line;
  print line;
  while (getline line) {
    print "\n",line;
  }
}
'
