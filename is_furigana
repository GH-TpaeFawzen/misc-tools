#!/bin/sh

######################################################################
#
# IS_FURIGANA - Validate All of the Given Letters Are "Furigana"
#
# USAGE: is_furigana <file>
# RET  : $? ... 0 will be returned only when all of the given letters are
#               furigana
#
# === Example ===
# 1. In the following cases, 0 will be returned
#      > echo "あか"      | is_furigana
#      > echo "ﾐﾄﾞﾘ"      | is_furigana
#      > printf 'ｱｲｳｴｵ\n' | is_furigana
#    * <0x0A> which is at the end of string will be allowed
#
# 2. In the following cases, >0 will be returned
#      > echo "ｱｵ1号"                 | is_furigana
#      > echo "とうきょうと ちよだく" | is_furigana
#      > printf 'ｱｲ\nｳｴｵ'             | is_furigana
#    * <0x0A> which is except the end of string will not be allowed
#    * blank (0x20) will be not also allowd
#
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2017-07-18
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} <file>
	Version : 2017-07-18 02:39:39 JST
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}


######################################################################
# Parse Arguments
######################################################################

# === Get the filepath ===============================================
# --- initialize option parameters -----------------------------------
file=''
#
# --- get them -------------------------------------------------------
case $# in
  0) :                   ;;
  1) file=$1             ;;
  *) print_usage_and_exit;;
esac

# === Validate the arguments =========================================
if   [ "_$file" = '_'                ] ||
     [ "_$file" = '_-'               ] ||
     [ "_$file" = '_/dev/stdin'      ] ||
     [ "_$file" = '_/dev/fd/0'       ] ||
     [ "_$file" = '_/proc/self/fd/0' ]  ; then
  file=''
elif [ -f "$file"                    ] ||
     [ -c "$file"                    ] ||
     [ -p "$file"                    ]  ; then
  [ -r "$file" ] || error_exit 1 'Cannot open the file: '"$file"
else
  print_usage_and_exit
fi
case "$file" in ''|-|/*|./*|../*) :;; *) file="./$file";; esac


######################################################################
# Main Routine
######################################################################

exec awk '
BEGIN {
  # register all character codes
  for(i=1;i<=255;i++){asc[sprintf("%c",i)]=i;}

  # return code
  ret = 0;
}

{
  if (NR>1) { ret=1; exit; }
  for (i=1; i<=length($0); i++) {
    s = substr($0,i,1);
    #if        (s < \200) {
    #  s_out = s_out s;
    #  continue;
    #}
    if        (s < \300) {
      ret=11; exit;
    } else if (s < \340) {
      ret=12; exit;
    } else if (s < \360) {
      s1 = substr($0,i+1,1);
      s2 = substr($0,i+2,1);
      utf8c = asc[s]*65536 + asc[s1]*256 + asc[s2];
      if        (utf8c < 14909825) { # out of range
        ret=21; exit;
      } else if (utf8c < 14909888) { # between "ぁ" and "み"
        i+=2; continue;
      } else if (utf8c < 14910080) { # out of range
        ret=22; exit;
      } else if (utf8c < 14910103) { # between "む" and "ゖ"
        i+=2; continue;
      } else if (utf8c < 14910106) { # out of range
        ret=23; exit;
      } else if (utf8c < 14910111) { # between "゜" and "ゞ"
        i+=2; continue;
      } else if (utf8c < 14910113) { # out of range
        ret=24; exit;
      } else if (utf8c < 14910144) { # between "ァ" and "タ"
        i+=2; continue;
      } else if (utf8c < 14910336) { # out of range
        ret=25; exit;
      } else if (utf8c < 14910399) { # between "ダ" and "ヾ"
        i+=2; continue;
      } else if (utf8c < 15711653) { # out of range
        ret=26; exit;
      } else if (utf8c < 15711680) { # between "･" and "ｿ"
        i+=2; continue;
      } else if (utf8c < 15711872) { # out of range
        ret=27; exit;
      } else if (utf8c < 15711904) { # between "ﾀ" and "ﾟ"
        i+=2; continue;
      } else                       { # out of range
        ret=28; exit;
      }
      i += 2;
    } else if (s < \370) {
      ret=13; exit;
    } else if (s < \374) {
      ret=14; exit;
    } else if (s < \376) {
      ret=15; exit;
    } else {
      ret=16; exit;
    }
  }
}

END {
  ret = (NR!=0) ? ret : 2;
  exit ret;
}
' ${file:+"$file"}
