#! /bin/sh -u
 
######################################################################
#
# MKCGIPOST - HTTP POST String Generator
#
# USAGE: mkcgipost <file>
#
# * <file> format :
#   <variable_name#1> <value#1>
#   <variable_name#2> <value#2>
#            :            :
# * <variablename> and <value> is separated by only one space.
#   And <value> can have space characters.
# * backslashes in <value> must be escaped as '\\'.
#   And <value> can have LF characters as '\n'.
#
# Return: $?=0 (when all of the arguments are valid)
#         stdout : encoded CGI variables for HTTP POST(GET)
#
# Written by Rich Mikan (richmikan[at]richlab.org) at 2015/02/13
#
# This is a public-domain software. It measns that all of the people
# can use this with no restrictions at all. By the way, I am fed up
# the side effects which are broght about by the major licenses.
#
######################################################################
 
# --- initalization --------------------------------------------------
PATH=/usr/bin:/bin

print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} <file>
	Version : Fri Feb 13 15:21:08 JST 2015
__USAGE
  exit 1
}

# --- parse arguments ------------------------------------------------
case $# in
  0) file='-'                                                     ;;
  1) case "$1" in -h|--help|--version) print_usage_and_exit;; esac
     if [ \( -f "$1"      \) -o \
          \( -c "$1"      \) -o \
          \( -p "$1"      \) -o \
          \( "_$1" = '_-' \)    ]; then
       file="$1"
       case "$file" in -|/*|./*|../*) :;; *) file="./$file";; esac
     else
       print_usage_and_exit
     fi                                                           ;;
  *) print_usage_and_exit                                         ;;
esac


# --- generate HTTP POST string --------------------------------------
exec env - awk '
  BEGIN {
    # --- prepare
    LF = sprintf("\n");
    OFS = "";
    ORS = "";
    # --- prepare str2url
    for(i= 0;i<256;i++){c2a[sprintf("%c",i)]=sprintf("%%%02X",i);}
    c2a[" "]="+";
    for(i=48;i< 58;i++){c2a[sprintf("%c",i)]=sprintf("%c",i);   }
    for(i=65;i< 91;i++){c2a[sprintf("%c",i)]=sprintf("%c",i);   }
    for(i=97;i<123;i++){c2a[sprintf("%c",i)]=sprintf("%c",i);   }
    c2a["-"]="-"; c2a["."]="."; c2a["_"]="_"; c2a["~"]="~";
    # --- first delemiter
    dlm = "";
  }
  {
    # --- get the name and value -------------------------------------
    i = length($0);
    j = index($0, " ");
    if (i == 0) { next; }
    if        (j == 0) {
      name  = $0;
      value = "";
    } else if (i == j) {
      name  = substr($0,   1, i-1);
      value = "";
    } else             {
      name  = substr($0,   1, j-1);
      value = substr($0, j+1     );
    }
    # --- unescape the value -----------------------------------------
    gsub(/\\n/ , LF  , value);
    gsub(/\\\\/, "\\", value);
    # --- URL encode -------------------------------------------------
    enc_value = "";
    for(i=1; i<=length(value); i++) {
      enc_value = enc_value c2a[substr(value,i,1)];
    }
    # --- print ------------------------------------------------------
    print dlm, name, "=", enc_value;
    # --- set delemiter ----------------------------------------------
    dlm = "&";
  }
' "$file"
