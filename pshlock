#! /bin/sh

######################################################################
#
# PSHLOCK : A Shared Lock (and Semaphore) Command within POSIX
#
# Usage   : pshlock [options] <lockname> [lockname ...]
#           -n <maxsharing> ... the maximum number of sharing lock
#                               This option is for using as a semaphore.
#                               The default value is -1.
#                               (-1 means infinity that is sharing lock)
#           -d <lockdir> ...... the directory for lockfiles.
#                               The lockfile directory will be decided
#                               as the following rule.
#                               1) this option "-d" if specified
#                               2) the environment varriable "PLOCKDIR"
#                                  if specified
#                               3) if the environment varriable "TMPDIR"
#                                  specified, "$TMPDIR/plock.<username>"
#                               4) "/tmp/plock.<username>" (default)
#           -w <maxwaiting> ... maximum waiting seconds to succeed locking
#                               (-1 means waiting infinitely)
#                               The default value is 10.
# Return  : $?     ==0 ... one or more locking were success
#                  !=0 ... all failure
#           stdout ....... enerated path of the lockfile (just lock-id)
#
# Example : lockid=$(pshlock -n 5 -d /tmp/plock -w 10 foo) || exit 1 #do sh-lock
#              :
#           (do something requires shared lock among up to 5 processes)
#              :
#           touch -c "$lockid"    # extend lifetime if you want
#              :                  # (but it needs to remain SUFFICIENT LIFETIME)
#           punlock "$lockid"                               # release the lock
#
# Notice  : The lockfile is written with rw-rw-rw for sharing.
#           If you want not to share it with others,
#           you have to give the lockdir rwxrwx--- or rwx------ permisson.
#
# Written by Rich Mikan (richmikan[at]richlab.org) at 2016/01/22
#
# This is a public-domain software. It measns that all of the people
# can use this with no restrictions at all. By the way, I am fed up
# the side effects which are broght about by the major licenses.
#
######################################################################


# ===== FUNCTIONS ====================================================

# --- FUNC: print the usage and exit ---------------------------------
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} [options] <lockname> [lockname ...]
	          -n <maxsharing> ... the maximum number of sharing lock
	                              This option is for using as a semaphore.
	                              The default value is -1.
	                              (-1 means infinity that is sharing lock)
	          -d <lockdir> ...... the directory for lockfiles.
	                              The lockfile directory will be decided
	                              as the following rule.
	                              1) this option "-d" if specified
	                              2) the environment varriable "PLOCKDIR"
	                                 if specified
	                              3) if the environment varriable "TMPDIR"
	                                 specified, "\$TMPDIR/plock.<username>"
	                              4) "/tmp/plock.<username>" (default)
	          -w <maxwaiting> ... maximum waiting seconds to succeed locking
	                              (-1 means waiting infinitely)
	                              The default value is 10.
	Return  : $?     ==0 ... one or more locking were success
	                 !=0 ... all failure
	          stdout ....... enerated path of the lockfile (just lock-id)
	Version : Fri Jan 22 19:00:20 JST 2016
__USAGE
  exit 1
}

# --- FUNC: exit-trap ------------------------------------------------
# arg   : [return code]
# ret   : (not return)
exit_trap () {
  trap EXIT HUP INT QUIT PIPE ALRM TERM
  rm -rf "${Dir_prelk:-}" "${File_modlk:-}" >/dev/null 2>&1
  i=$?
  case $# in 0) exit $i;; *) exit ${1:-0};; esac
}



# ===== PREPARATION ==================================================

# --- initialize -----------------------------------------------------
set -u
PATH='/usr/bin:/bin'
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
export IFS LC_ALL=C LANG=C PATH
umask 0000

# --- parse the arguments --------------------------------------------
max_num_of_sharing=-1
dopt=''
max_waiting_secs=10
max_lifetime_secs=''
ppid=$(ps -Ao pid,ppid | awk '$1=='"$$"'{print $2;exit}')
optmode=''
while [ $# -gt 0 ]; do
  case "$optmode" in
    '') case "$1" in
          --)       shift
                    break
                    ;;
          -[hv]|--help|--version)
                    print_usage_and_exit
                    ;;
          -[ndwl]*) ret=$(printf '%s\n' "${1#-}"                              |
                          awk '{opt     = substr($0,1,1);                     #
                                opt_str = (length($0)>1) ? substr($0,2) : ""; #
                                printf("%s %s", opt, opt_str);              }')
                    ret1=${ret%% *}
                    ret2=${ret#* }
                    case "$ret1$ret2" in
                      n)  optmode='n'             ;;
                      n*) max_num_of_sharing=$ret2;;
                      d)  optmode='d'             ;;
                      d*) dopt=$ret2              ;;
                      w)  optmode='w'             ;;
                      w*) max_waiting_secs=$ret2  ;;
                      l)  optmode='l'             ;;
                      l*) max_lifetime_secs=$ret2 ;;
                    esac
                    ;;
          -*)       print_usage_and_exit
                    ;;
          *)        break
                    ;;
        esac
        ;;
    n)  max_num_of_sharing=$1
        optmode=''
        ;;
    d)  dopt=$1
        optmode=''
        ;;
    w)  max_waiting_secs=$1
        optmode=''
        ;;
    l)  max_lifetime_secs=$1
        optmode=''
        ;;
  esac
  shift
done
case $# in 0) print_usage_and_exit;; esac
echo "_$max_num_of_sharing" | grep -Eq '^_-?[0-9]+$' || {
  printf '%s: Maximum number of sharing parameter is invalid\n' "${0##*/}" 1>&2
  exit 1
}
echo "_$max_waiting_secs"   | grep -Eq '^_-?[0-9]+$' || {
  printf '%s: Maximum waiting seconds parameter is invalid\n' "${0##*/}" 1>&2
  exit 1
}
case "$max_lifetime_secs" in
  '') :                                                                       ;;
   *) printf '%s: option "-l" could not use in this command\n' "${0##*/}" 1>&2;;
esac
Dir_lock=''
while :; do
  case "$dopt"         in '') :;; *) Dir_lock="${dopt%/}/"
                                     break                             ;; esac
  case "${PLOCKDIR:-}" in '') :;; *) Dir_lock="${PLOCKDIR%/}/"
                                     break                             ;; esac
  case "${TMPDIR:-}"   in '') :;; *) Dir_lock="${TMPDIR%/}/plock.$(id -un)/"
                                     mkdir -p "$Dir_lock" 2>/dev/null
                                     break                             ;; esac
  case 'default'       in         *) Dir_lock="/tmp/plock.$(id -un)/"
                                     mkdir -p "$Dir_lock" 2>/dev/null
                                     break                             ;; esac
done
case $? in
  [!0]*) echo "${0##*/}: Failed to make the lockfile directory" 1>&2;exit 1;;
esac
[ \( -z "$dopt" \) -o \( -d "$dopt" \) ] || {
  echo "${0##*/}: \"$Dir_lock\": No such directory or permission denied" 1>&2
  exit 1
}
case "$Dir_lock" in [!/]*) s=$(pwd);Dir_lock="${s%/}/$Dir_lock";; esac



# ===== MAIN =========================================================

trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
count_all=0
count_success=0
for lockname in "$@"; do
  count_all=$((count_all+1))

  # --- Validate the lockname  ---------------------------------------
  case "$lockname" in '.border_date_and_time.tmp')
    printf '%s: ".border_date_and_time.tmp" is reserved, skipped\n' \
           "${0##*/}" 1>&2
    continue
    ;;
  esac
  echo "_$lockname" | grep -q '[/:]' && {
    printf '%s: "%s": Neither "/" nor ":" can be used in lockname, skipped\n' \
           "${0##*/}" "$lockname" 1>&2
    continue
  }
  echo "_$lockname" | grep -Eq '^_\.preshlock\.[0-9]{14}\.[0-9]+\.[0-9]+$' && {
    echo "${0##*/}: \"$lockname\": '/' is reserved, skip" 1>&2
    continue
  }

  # --- Prepare the pre-lock directory -------------------------------
  # 1) decide a lock-procid(yyyymmddhhmmss.uniqid.pid)
  s=$(ps -o pid,ppid | awk '$2=='"$$"'{print $1;exit}')
  sublockname="$(date '+%Y%m%d%H%M%S').${s}.$ppid"
  # 2) make a temp-dir
  Dir_prelk="${Dir_lock}.preshlock.$sublockname"
  mkdir "$Dir_prelk"
  case $? in [!0]*)
    echo "${0##*/}: \"$lockname\": Failed to make a pre-lock dir #1" 1>&2
    continue
    ;;
  esac
  # 3) make the 1st lockproc-id directory "into and into" the lockname directory
  #    (The reason of "into and into" is to prevent from succeeding mv command
  #     when the samenamed lock directory already exists.)
  mkdir -p "$Dir_prelk/$lockname/$lockname/$sublockname"
  case $? in [!0]*)
    echo "${0##*/}: \"$lockname\": Failed to make a pre-lock dir #2" 1>&2
    continue
    ;;
  esac

  # --- Try to set shared-lock ---------------------------------------
  # 1) trying loop
  if [ $max_waiting_secs -ge 0 ]; then
    try=$((max_waiting_secs+1))
  else
    try=1
  fi
  while [ $try -gt 0 ]; do
    # 1-1) try to "mv" if the normal lockdir does not exist
    cd "$Dir_lock$lockname/$lockname" 2>/dev/null || {
      touch -c "$Dir_prelk/$lockname/$lockname/$sublockname"
      mv "$Dir_prelk/$lockname" "$Dir_lock$lockname" 2>/dev/null || {
        [ $max_waiting_secs -ge 0 ] && try=$((try-1)) # retry  if failed  to mv
        case $try in 0) :;; *) sleep 1;; esac
        continue
      }
      break                                           # finish if succeed to mv
    }
    # 1-2) try to create the accesing right token file "modifying"
    File_modlk="$Dir_lock$lockname/$lockname/modifying"
    (set -C; echo $ppid > 'modifying') 2>/dev/null || {
      File_modlk=''                                   # retry  if already exists
      [ $max_waiting_secs -ge 0 ] && try=$((try-1))
      case $try in 0) :;; *) sleep 1;; esac
      continue
    }
    # 1-3) check the current number of the locking processes
    n=$(ls -ld . 2>/dev/null | awk '{print $2-2;}')
    [ \( $max_num_of_sharing -lt 0 \) -o \( $n -lt $max_num_of_sharing \) ] || {
      rm -f 'modifying' 2>/dev/null                   # retry  if reached limit
      File_modlk=''
      [ $max_waiting_secs -ge 0 ] && try=$((try-1))
      case $try in 0) :;; *) sleep 1;; esac
      continue
    }
    # 1-4) create a sublock-id directory
    s=$(ps -o pid,ppid | awk '$2=='"$$"'{print $1;exit}')
    sublockname="$(date '+%Y%m%d%H%M%S').${s}.$ppid"
    mkdir $sublockname || {
      try=-1                                          # exit loop abnormally
      rm -f 'modifying' 2>/dev/null
      File_modlk=''
      break
    }
    # 1-5) finish the loop successfully
    rm -f 'modifying' 2>/dev/null
    File_modlk=''
    break
  done
  # 2) $try > 0 : success and print the path of the generated lockfile
  #         ==0 : now fully locked
  #         < 0 : abnormally exit
  #    otherwise, it means some error happened
  err=0
  case $try in
    [1-9]*) printf '%s%s/%s/%s\n'                                           \
                   "$Dir_lock" "${lockname}" "${lockname}" "$sublockname"
            ;;
         0) printf '%s: "%s": timeout, try again later\n' \
                   "${0##*/}" "$lockname" 1>&2
            err=1
            ;;
        -1) printf '%s: "%s": timeout, the lock-dir is broken!\n' \
                   "${0##*/}" "$lockname" 1>&2
            err=1
            ;;
        -*) printf '%s: "%s": unexpedter error!\n' "${0##*/}" "$lockname" 1>&2
            err=1
            ;;
  esac

  # --- Remove the pre-lock directory --------------------------------
  rm -rf "${Dir_prelk:-}" >/dev/null 2>&1
  Dir_prelk=''

  case $err in 0) count_success=$((count_success+1));; esac
done



# ===== FINISH =======================================================

# --- Return 1 if all locking failed ---------------------------------
case "$count_success:$count_all" in
  0:[!0]*) exit_trap 1;;
        *) exit_trap 0;;
esac
